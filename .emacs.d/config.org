* Minor settings
** evil-want-keybinding
#+BEGIN_SRC emacs-lisp
  (setq evil-want-keybinding nil)
#+END_SRC
** electric
   #+BEGIN_SRC emacs-lisp

     (setq electric-pair-pairs '(
				 (?\( . ?\))
				 (?\[ . ?\])
				 (?\" . ?\")
				 (?\{ . ?\})
				 ))
    (electric-pair-mode t)
    (setq electric-pair-delete-adjacent-pairs t)
   #+End_SRC
** Visual line mode
#+BEGIN_SRC emacs-lisp
  (global-visual-line-mode)
#+END_SRC
* Dired
** Dired to shell
#+BEGIN_SRC emacs-lisp
  (require 'dired)
  (define-key dired-mode-map "e" 'shell-instead-dired)

  (defun shell-instead-dired ()
    (interactive)
    (let ((dired-buffer (current-buffer)))
      (eshell (concat default-directory "-shell"))
      (kill-buffer dired-buffer) ;; remove this line if you don't want to kill the dired buffer
      (delete-other-windows)))
#+END_SRC
* Terminal
** Setting default shell to fish
   #+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/fish")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
   #+END_SRC
** Implement proper terminal in emacs
#+BEGIN_SRC emacs-lisp
  (use-package vterm
    :ensure t)
#+END_SRC
** evil settings for vterm
#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
  :ensure t)
  (require 'vterm nil t)

  (defconst evil-collection-vterm-maps '(vterm-mode-map))

  (defvar vterm--process)

  (defun evil-collection-vterm-escape-stay ()
    "Go back to normal state but don't move cursor backwards.
  Moving cursor backwards is the default vim behavior but
  it is not appropriate in some cases like terminals."
    (setq-local evil-move-cursor-back nil))

  (defun evil-collection-vterm-exit-function (buffer)
    "Automatically kill `vterm' buffer on exit."
    (when buffer
      (kill-buffer buffer)))

  (defvar-local evil-collection-vterm-send-escape-to-vterm-p nil
    "Track whether or not we send ESC to `vterm' or `emacs'.")

  (defun evil-collection-vterm-toggle-send-escape ()
    "Toggle where ESC is sent between `vterm' and `emacs'.
  This is needed for programs that use ESC, e.g. vim or an ssh'd emacs that
  also uses `evil-mode'."
    (interactive)
    (if evil-collection-vterm-send-escape-to-vterm-p
	(evil-collection-define-key 'insert 'vterm-mode-map (kbd "<escape>")
	  (lookup-key evil-insert-state-map (kbd "<escape>")))
      (evil-collection-define-key 'insert 'vterm-mode-map
	(kbd "<escape>") 'vterm--self-insert))
    (setq evil-collection-vterm-send-escape-to-vterm-p
	  (not evil-collection-vterm-send-escape-to-vterm-p))
    (message (format "Sending ESC to %s."
		     (if evil-collection-vterm-send-escape-to-vterm-p
			 "vterm"
		       "emacs"))))
		       
  (defun evil-collection-vterm-toggle-send-ctrl-bracket ()
    "Toggle where C-[ (ESC) is sent between `vterm' and `emacs'."
    (interactive)
    (if evil-collection-vterm-send-escape-to-vterm-p
	(evil-collection-define-key 'insert 'vterm-mode-map (kbd "C-[")
	  (lookup-key evil-insert-state-map (kbd "C-[")))
      (evil-collection-define-key 'insert 'vterm-mode-map
	(kbd "C-[") 'vterm--self-insert))
    (setq evil-collection-vterm-send-escape-to-vterm-p
	  (not evil-collection-vterm-send-escape-to-vterm-p))
    (message (format "Sending ESC to %s."
		     (if evil-collection-vterm-send-escape-to-vterm-p
			 "vterm"
		       "emacs"))))


  ;;;###autoload
  (defun evil-collection-vterm-setup ()
    "Set up `evil' bindings for `vterm'."
    (evil-set-initial-state 'vterm-mode 'insert)

    (add-hook 'vterm-mode-hook #'evil-collection-vterm-escape-stay)
    (add-hook 'vterm-exit-functions #'evil-collection-vterm-exit-function)

    ;; Open to a better binding...
    (evil-collection-define-key '(normal insert) 'vterm-mode-map
      (kbd "C-c C-z") 'evil-collection-vterm-toggle-send-escape)

    ;; Evil has some "C-" bindings in insert state that shadow regular terminal
    ;; bindings. Don't raw-send "C-c" (prefix key) nor "C-h" (help prefix).
    (evil-collection-define-key 'insert 'vterm-mode-map
      (kbd "C-a") 'vterm--self-insert
      (kbd "C-b") 'vterm--self-insert     ; Should not be necessary.
      (kbd "C-d") 'vterm--self-insert
      (kbd "C-e") 'vterm--self-insert
      (kbd "C-f") 'vterm--self-insert     ; Should not be necessary.
      (kbd "C-k") 'vterm--self-insert
      (kbd "C-l") 'vterm--self-insert     ; Should not be necessary.
      (kbd "C-n") 'vterm--self-insert
      (kbd "C-o") 'vterm--self-insert
      (kbd "C-p") 'vterm--self-insert
      (kbd "C-q") 'vterm--self-insert     ; Should not be necessary.
      (kbd "C-r") 'vterm--self-insert
      (kbd "C-s") 'vterm--self-insert     ; Should not be necessary.
      (kbd "C-t") 'vterm--self-insert
      (kbd "C-u") 'vterm--self-insert     ; Should not be necessary.
      (kbd "C-v") 'vterm--self-insert     ; Should not be necessary.
      (kbd "C-w") 'vterm--self-insert
      (kbd "C-y") 'vterm--self-insert
      (kbd "C-z") 'vterm--self-insert)

    (evil-collection-define-key 'normal 'vterm-mode-map
      "p" 'vterm-yank
      "u" 'vterm-undo))

  (provide 'evil-collection-vterm)
#+END_SRC
* Org
** basic config
   #+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
  (add-hook 'org-mode-hook '(lambda () (visual-line-mode 1)))
  (add-to-list 'org-structure-template-alist
  '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))

  (setq org-agenda-files (quote ("~/test.org")))
   #+END_SRC
** Org Bullets
   #+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
   #+END_SRC
** Gcal
   #+BEGIN_SRC emacs-lisp
  (org-babel-load-file (expand-file-name "~/Notebooks/orgfiles.org"))
  (setq org-agenda-files (list "~/Notebooks/org/gcal.org"
			       "~/Notebooks/org/i.org"))
   #+END_SRC
* powerline
  #+BEGIN_SRC emacs-lisp
    (use-package powerline
      :ensure t
      :config
      (setq powerline-default-separator (quote arrow))
      (powerline-default-theme)
      (powerline-reset))
  #+END_SRC
* FZF
** Install
   #+BEGIN_SRC emacs-lisp
      (use-package fzf
	:ensure t
	:config
   #+END_SRC
** Search with C-x C-f
   #+BEGIN_SRC emacs-lisp
    	(global-set-key (kbd "C-x C-f") 'fzf))
   #+END_SRC
* Ripgrep
  #+BEGIN_SRC emacs-lisp
    (use-package deadgrep
    :ensure t)
  #+END_SRC

* IDO
** enable ido
   #+BEGIN_SRC emacs-lisp
    (setq ido-enable-flex-matching t)
    (setq ido-everywhere t)
    (ido-mode 1)
    (setq ido-use-filename-at-point 'guess)
    (setq ido-create-new-buffer 'always)
    (use-package ido-vertical-mode
      :ensure t
      :init
      (ido-vertical-mode 1))
    (setq ido-vetical-define-keys 'C-n-and-C-p-only)
   #+END_SRC
** smex
   #+BEGIN_SRC emacs-lisp
      (use-package smex
	:ensure t
	:init (smex-initialize)
	:bind
	("M-x" . smex))
   #+END_SRC
* Config edit/reload
** edit
   #+BEGIN_SRC emacs-lisp
  (defun config-visit()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key(kbd "C-c e") 'config-visit)
   #+END_SRC
** reload
   #+BEGIN_SRC emacs-lisp
  (defun config-reload()
    (interactive)
    (org-babel-load-file(expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
   #+END_SRC
* Convenient functions
** kill-whole-word
   #+BEGIN_SRC emacs-lisp
  (defun kill-whole-word()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w w") 'kill-whole-word)
   #+END_SRC
* Rainbow
  #+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init
    (rainbow-mode 1)
)
  #+END_SRC

* Rainbow-delimiters
  #+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init(rainbow-delimiters-mode 1))
  #+END_SRC
* sudo edit
  #+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("C-x e" . sudo-edit))
  #+END_SRC
* Dashboard
  #+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-banner-logo-title "YEAR OF THE LINUX DESKTOP")
    (setq dashboard-startup-banner "~/.emacs.d/LinuxDesktop.png")
    (setq dashboard-center-content t)
    (setq dashboard-items '((recents . 15)))
    (setq dashboard-set-footer nil))
  #+END_SRC
* Company
  #+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode))
  #+END_SRC
* Unsorted
  #+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode))

(use-package beacon
  :ensure t
  :init
  (beacon-mode 1))
(setq auto-save-default nil)

(defalias 'yes-or-no-p 'y-or-n-p)


(setq ring-bell-function 'ignore)

(when window-system (global-hl-line-mode t))
(when window-system (global-prettify-symbols-mode t)) 

(use-package diff-hl
  :ensure t
  :init
  (diff-hl-flydiff-mode))


(set-frame-font "DejaVu Sans Mono 12" nil t)

(use-package deferred
  :ensure t)
(use-package evil-leader
  :ensure t
  :init
(global-evil-leader-mode))
(use-package magit
  :ensure t)
(use-package evil-magit
  :ensure t)
(use-package git-gutter
  :ensure t
  :init
(git-gutter-mode 1))
(use-package evil
  :ensure t
  :init
  (evil-mode 1))
(setq evil-search-module 'evil-search
      evil-want-C-w-in-emacs-state t)
(use-package all-the-icons
  :ensure t)
(add-to-list 'load-path "~/.emacs.d/lisp/")
(load "inertial-scroll")
(define-key evil-normal-state-map (kbd "C-u") 'inertias-down)
(define-key evil-normal-state-map (kbd "C-d") 'inertias-up)

(use-package ispell
  :ensure t)
(setq ispell-program-name "aspell")
(add-to-list 'ispell-local-dictionary-alist '("deutsch-hunspell"
                                              "[[:alpha:]]"
                                              "[^[:alpha:]]"
                                              "[']"
                                              t
                                              ("-d" "de_DE"); Dictionary file name
                                              nil
                                              iso-8859-1))
(setq ispell-dictionary "de_DE")
(setq ispell-extra-args '("--sug-mode=ultra" "--lang=de_DE"))
(setq flyspell-issue-welcome-flag nil)

(add-to-list 'auto-mode-alist (cons "\\.adoc\\'" 'adoc-mode))



(menu-bar-mode 0)
(tool-bar-mode 0)
(display-line-numbers-mode)
(setq display-line-numbers 'relative)
(scroll-bar-mode 0)
(setq initial-buffer-choice t)

  #+END_SRC
