* Use-package
** Chords
#+BEGIN_SRC emacs-lisp
  (use-package use-package-chords
    :ensure t
    :config
    (key-chord-mode 1))
#+END_SRC

* Minor settings
** electric
   #+BEGIN_SRC emacs-lisp

     (setq electric-pair-pairs '(
				 (?\( . ?\))
				 (?\[ . ?\])
				 (?\" . ?\")
				 (?\{ . ?\})
				 ))
    (electric-pair-mode t)
   (setq electric-pair-delete-adjacent-pairs t)
   #+End_SRC
** Visual line mode
#+BEGIN_SRC emacs-lisp
  (global-visual-line-mode)
#+END_SRC

** Number highlighting
#+BEGIN_SRC emacs-lisp
  (use-package highlight-numbers
    :ensure t)
#+END_SRC
** Increase overlap when scrolling by whole screens
#+BEGIN_SRC emacs-lisp
  (setq next-screen-context-lines 3)
  (use-package golden-ratio-scroll-screen
    :ensure t
    :config
    (global-set-key (kbd "C-v") 'golden-ratio-scroll-screen-up)
    (global-set-key (kbd "M-v") 'golden-ratio-scroll-screen-down))
#+END_SRC
* EVIL
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :config
    (evil-mode 1))
#+END_SRC
* Hungry-Delete
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config
    (global-hungry-delete-mode))
#+END_SRC
* expand-region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :config
    (global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC
* iedit
#+BEGIN_SRC emacs-lisp
  (use-package iedit
    :ensure t)
#+END_SRC
* Dired
** Dired to shell
#+BEGIN_SRC emacs-lisp
  (require 'dired)
  (define-key dired-mode-map "e" 'shell-instead-dired)

  (defun shell-instead-dired ()
    (interactive)
    (let ((dired-buffer (current-buffer)))
      (eshell (concat default-directory "-shell"))
      (kill-buffer dired-buffer) ;; remove this line if you don't want to kill the dired buffer
      (delete-other-windows)))
#+END_SRC
* Eshell

* Add copied text from x11 to killring
#+BEGIN_SRC emacs-lisp
  (setq save-interprogram-paste-before-kill t)
#+END_SRC
* Dumb-jump
#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :ensure t
    :config
    (dumb-jump-mode))
#+END_SRC
* Treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t)
  (use-package treemacs-projectile
    :ensure t)
#+END_SRC
* LaTeX
** Auctex
#+BEGIN_SRC emacs-lisp
  (use-package tex
    :defer t
    :ensure auctex
    :config
    (setq TeX-auto-save t))
#+END_SRC
** company-auctex
#+BEGIN_SRC emacs-lisp
  (use-package company-auctex
    :ensure t
    :config
    (company-auctex-init))
#+END_SRC
** latexmk
#+BEGIN_SRC emacs-lisp
  (use-package auctex-latexmk
    :ensure t
    :config
    (auctex-latexmk-setup)

    (eval-after-load "tex"
      '(progn
         (add-to-list 'TeX-expand-list
                      '("%(-PDF)"
                        (lambda ()
                          (cond ((string-match "TeX-engine: pdftex" (buffer-string)) "-pdf")
                                ((string-match "TeX-engine: luatex" (buffer-string)) "-pdflatex=lualatex -pdf")
                                ((string-match "TeX-engine: xetex" (buffer-string)) "-pdflatex=xelatex -pdf")
                                (t "-dvi -pdfps")))))
       
         (add-to-list 'TeX-command-list
                      '("Latexmk" "latexmk %(-PDF) -synctex=1 %s"
                        TeX-run-TeX nil t
                        :help "Run Latexmk on file to build everything."))

         (setq TeX-command-default "Latexmk")
         )
      )

    ;; org-latex
    (setq org-latex-to-pdf-process (list "latexmk -f -pdf %t")))
#+END_SRC
** PdfTools
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t
    :config
    (pdf-tools-install)
    (defun th/pdf-view-revert-buffer-maybe (file)
      (let ((buf (find-buffer-visiting file)))
        (when buf 
          (with-current-buffer buf
            (when (derived-mode-p 'pdf-view-mode)
              (pdf-view-revert-buffer nil t))))))

    (add-hook 'TeX-after-TeX-LaTeX-command-finished-hook
              #'th/pdf-view-revert-buffer-maybe)
    (add-hook 'TeX-after-compilation-finished-functions  ;; wasn't working after Latexmk command 
              #'th/pdf-view-revert-buffer-maybe))
#+END_SRC
** reftex
#+BEGIN_SRC emacs-lisp
  (use-package reftex
    :ensure t
    :config
    ;; Turn on RefTeX in AUCTeX
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
    ;; Activate nice interface between RefTeX and AUCTeX
    (setq reftex-plug-into-AUCTeX t))
#+END_SRC
** latex-magic-buffer
#+BEGIN_SRC emacs-lisp
  (use-package magic-latex-buffer
    :ensure t
    :hook
    (tex-mode-hook . magic-latex-buffer))
#+END_SRC
* Pager
#+BEGIN_SRC emacs-lisp
  (require 'man)
  (set-face-attribute 'Man-overstrike nil :inherit font-lock-type-face :bold t)
  (set-face-attribute 'Man-underline nil :inherit font-lock-keyword-face :underline t)
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode +1))
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+END_SRC
* Terminal
** Setting default shell to fish
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/fish")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC
** Implement proper terminal in emacs
#+BEGIN_SRC emacs-lisp
  (use-package vterm
    :ensure t
    :config
    (setq vterm-shell '/bin/fish))
#+END_SRC
* Modeline
** display time in modeline
#+BEGIN_SRC emacs-lisp
  (setq display-time-day-and-date t)
  (setq display-time-24hr-format t)
  (display-time-mode)
#+END_SRC
** Doom Modeline
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t)

  (use-package doom-modeline
    :ensure t
    :hook
    (after-init . doom-modeline-mode))
#+END_SRC
* Org
** org plus contrib
(use-package org
  :ensure org-plus-contrib)
** make it look nice
*** Hide emphasis markup
#+BEGIN_SRC emacs-lisp
  (setq org-hide-emphasis-markers t)
#+END_SRC
*** Different headline sizes
#+BEGIN_SRC emacs-lisp
  (let* ((variable-tuple
  (cond ((x-list-fonts "DejaVu Sans Mono") '(:font "DejaVu Sans Mono"))
		((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
		((x-list-fonts "Verdana")         '(:font "Verdana"))
		((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
		))
	 (base-font-color     (face-foreground 'default nil 'default))
	 (headline           `(:inherit default :weight bold)))

    (custom-theme-set-faces
     'user
     `(org-level-8 ((t (,@headline))))
     `(org-level-7 ((t (,@headline))))
     `(org-level-6 ((t (,@headline))))
     `(org-level-5 ((t (,@headline))))
     `(org-level-4 ((t (,@headline :height 1.1))))
     `(org-level-3 ((t (,@headline :height 1.25))))
     `(org-level-2 ((t (,@headline :height 1.5))))
     `(org-level-1 ((t (,@headline :height 1.75))))
     `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))
#+END_SRC
** basic config
   #+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
  (add-hook 'org-mode-hook '(lambda () (visual-line-mode 1)))
  (add-to-list 'org-structure-template-alist
  '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))

  (setq org-agenda-files (quote ("~/test.org")))
   #+END_SRC
** don't ask when exporting code
#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+END_SRC
** Babel
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((sql . t)))
#+END_SRC
** Org Bullets
   #+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
   #+END_SRC
** Gcal
   #+BEGIN_SRC emacs-lisp
  (org-babel-load-file (expand-file-name "~/Notebooks/orgfiles.org"))
  (setq org-agenda-files (list "~/Notebooks/org/gcal.org"
			       "~/Notebooks/org/i.org"))
   #+END_SRC
* Org-reveal
** install and configure
  #+BEGIN_SRC emacs-lisp
    (use-package ox-reveal
      :ensure t
      :config 
      (setq org-reveal-root "file:///home/julius/Projects/reveal.js"))
      (setq Org-Reveal-root "file:///path-to-reveal.js")
      (setq Org-Reveal-title-slide nil)
  #+END_SRC
* htmlize
** install
#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    :ensure t)
#+END_SRC
* Wrap Region
Wrap a region with punctuations
#+BEGIN_SRC emacs-lisp
  (use-package wrap-region
    :ensure t
    :config
    (wrap-region-mode))
#+END_SRC
* Asciidoc
** Install adoc-mode
#+BEGIN_SRC emacs-lisp
  (use-package adoc-mode
    :ensure t)
#+END_SRC
* Language-modes
** Yaml
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t)
#+END_SRC
* Kotlin
#+BEGIN_SRC emacs-lisp
  (use-package kotlin-mode
    :ensure t)
  (use-package ob-kotlin
    :ensure t)
#+END_SRC
* Java
#+BEGIN_SRC emacs-lisp
  (require 'ob-java)
  (add-to-list 'org-babel-load-languages '(java . t))
#+END_SRC
* Clojure
#+BEGIN_SRC emacs-lisp
(use-package clojure-mode
  :ensure t)
(use-package cider
  :ensure t)
#+END_SRC
* Python
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :config
    (elpy-enable))
#+END_SRC
** virtualenvwrapper
#+BEGIN_SRC emacs-lisp
  (use-package virtualenvwrapper
    :ensure t
    :config
    (venv-initialize-interactive-shells)
    (venv-initialize-eshell)
    (setq venv-location "~/Projects/G2ATools/"))
#+END_SRC
* Snippets
** install YASnippet
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure t
       :config
       (yas-global-mode 1))
   #+END_SRC
* Increment Numbers
#+BEGIN_SRC emacs-lisp
  (defun increment-number-at-point ()
      (interactive)
      (skip-chars-backward "0-9")
      (or (looking-at "[0-9]+")
	  (error "No number at point"))
      (replace-match (number-to-string (1+ (string-to-number (match-string 0))))))

  (defun my-decrement-number-decimal (&optional arg)
    (interactive "p*")
    (my-increment-number-decimal (if arg (- arg) -1)))

  (defun my-change-number-at-point (change)
    (let ((number (number-at-point))
	  (point (point)))
      (when number
	(progn
	  (forward-word)
	  (search-backward (number-to-string number))
	  (replace-match (number-to-string (funcall change number)))
	  (goto-char point)))))
  (defun my-increment-number-at-point ()
    "Increment number at point like vim's C-a"
    (interactive)
    (my-change-number-at-point '1+))
  (defun my-decrement-number-at-point ()
    "Decrement number at point like vim's C-x"
    (interactive)
    (my-change-number-at-point '1-))
  (global-set-key (kbd "C-c a") 'my-increment-number-at-point)
  (global-set-key (kbd "C-c x") 'my-decrement-number-at-point)
#+END_SRC
* Dotmode
#+BEGIN_SRC emacs-lisp
  (use-package dot-mode
    :ensure t
    :config
    (add-hook 'find-file-hooks 'dot-mode-on))
#+END_SRC
* Config edit/reload
** edit
   #+BEGIN_SRC emacs-lisp
  (defun config-visit()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key(kbd "C-c e") 'config-visit)
   #+END_SRC
** reload
   #+BEGIN_SRC emacs-lisp
  (defun config-reload()
    (interactive)
    (org-babel-load-file(expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
   #+END_SRC
* Convenient functions
** kill-whole-word
   #+BEGIN_SRC emacs-lisp
  (defun kill-whole-word()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w w") 'kill-whole-word)
   #+END_SRC
* Rainbow
** Rainbow-delimiters
  #+BEGIN_SRC emacs-lisp
    (use-package rainbow-delimiters
      :ensure t
      :config
      (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
  #+END_SRC
* sudo edit
  #+BEGIN_SRC emacs-lisp
    (use-package sudo-edit
      :ensure t)
  #+END_SRC
* Counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t)
#+END_SRC
** counsel-projectile
#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :ensure t
    :config
    (counsel-projectile-mode))
#+END_SRC
* Swiper

#+BEGIN_SRC emacs-lisp
    (use-package swiper
      :ensure t
      :init)
#+END_SRC
* Ivy
** Install and config
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :init
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    ;; enable this if you want `swiper' to use it
    ;; (setq search-default-mode #'char-fold-to-regexp)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> l") 'counsel-find-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history))
#+END_SRC
* Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :config
    (global-set-key (kbd "C-;") 'avy-goto-char-timer)
    (global-set-key (kbd "C-:") 'avy-goto-char-2)
    )
#+END_SRC
* Dashboard
  #+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-banner-logo-title "YEAR OF THE LINUX DESKTOP")
    (setq dashboard-startup-banner "~/.emacs.d/LinuxDesktop.png")
    (setq dashboard-center-content t)
    (setq dashboard-items '((recents . 15)))
    (setq dashboard-set-footer nil))
  #+END_SRC
* Undohist
#+BEGIN_SRC emacs-lisp
  (use-package undohist
    :ensure t
    :config
    (undohist-initialize))
#+END_SRC
* Company
  #+BEGIN_SRC emacs-lisp
    (use-package company
      :ensure t
      :init
      (global-company-mode)
      :config
      (with-eval-after-load 'company
        (setq company-minimum-prefix-length 2)))
  #+END_SRC
* Emmet
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :ensure t
    :config
    (add-hook 'sgml-mode-hook 'emmet-mode)
    (add-hook 'css-mode-hook 'emmet-mode))
#+END_SRC
* Javascript (js2)
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :config)

  (use-package js2-refactor
    :ensure t)
  (use-package xref-js2
    :ensure t)
#+END_SRC
* Polymode
#+BEGIN_SRC emacs-lisp
  (use-package polymode
    :ensure t)
#+END_SRC
** Polymer-mode
#+BEGIN_SRC emacs-lisp
  (require 'polymode)
  (require 'js2-mode)

  (define-hostmode javascript-hostmode
    :mode 'js2-mode
    :protect-syntax t)
  (define-innermode lit-html-innermode
    :mode 'mhtml-mode
    :head-matcher "html`"
    :tail-matcher "`"
    :head-mode 'host
    :tail-mode 'host)


  (define-polymode polymer-mode
    :hostmode 'javascript-hostmode
    :innermodes '(lit-html-innermode))
  (add-to-list 'auto-mode-alist '("\\.js\\'" . polymer-mode))
#+END_SRC
** sql in python
#+BEGIN_SRC emacs-lisp
  (use-package polymode
    :ensure t
    :mode ("\.py$" . poly-python-sql-mode)
    :config
    (setq polymode-prefix-key (kbd "C-c n"))
    (define-hostmode poly-python-hostmode :mode 'python-mode)

    (define-innermode poly-sql-expr-python-innermode
      :mode 'sql-mode
      :head-matcher (rx "r" (= 3 (char "\"'")) (* (any space)))
      :tail-matcher (rx (= 3 (char "\"'")))
      :head-mode 'host
      :tail-mode 'host)

    (defun poly-python-sql-eval-chunk (beg end msg)
      "Calls out to `sql-send-region' with the polymode chunk region"
      (sql-send-region beg end))

    (define-polymode poly-python-sql-mode
      :hostmode 'poly-python-hostmode
      :innermodes '(poly-sql-expr-python-innermode)
      (setq polymode-eval-region-function #'poly-python-sql-eval-chunk)
      (define-key poly-python-sql-mode-map (kbd "C-c C-c") 'polymode-eval-chunk)))
#+END_SRC
* Indentation
** Agressive indent
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :ensure t
    :config
    (global-aggressive-indent-mode 1))
#+END_SRC
** Use proper amount of spaces for displaying tabs
#+BEGIN_SRC emacs-lisp
  ;;from: https://stackoverflow.com/a/1819405/8825153
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  ;;(setq indent-line-function 'insert-tab)
#+END_SRC
* Git
** git-gutter
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :ensure t

    ;;:bind
    ;;(("H-y g n" . git-gutter:next-hunk)
     ;;("H-y g p" . git-gutter:previous-hunk)
     ;;("H-y g a" . git-gutter:stage-hunk))

    :config
    (add-hook 'prog-mode-hook 'git-gutter-mode))
#+END_SRC
** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    ;;:bind
    ;;(("H-y g s" . magit-status))
	)
#+END_SRC
* Inertial scroll / smooth scrolling
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/lisp/")
  (load "inertial-scroll")
  ;;(define-key evil-normal-state-map (kbd "C-u") 'inertias-down)
  ;;(define-key evil-normal-state-map (kbd "C-d") 'inertias-up)
#+END_SRC
* Dedicated folder for autosave/swap files
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+END_SRC
* Window-management
* Set font
#+BEGIN_SRC emacs-lisp
  (set-frame-font "DejaVu Sans Mono 14" nil t)
#+END_SRC
* Unsorted
  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :ensure t
      :init
      (which-key-mode))

    (use-package beacon
      :ensure t
      :init
      (beacon-mode 1))

    (defalias 'yes-or-no-p 'y-or-n-p)


    (setq ring-bell-function 'ignore)

    (when window-system (global-prettify-symbols-mode t)) 

    (use-package diff-hl
      :ensure t
      :init
      (diff-hl-flydiff-mode))

    (use-package deferred
      :ensure t)

    (use-package all-the-icons
      :ensure t)

    (use-package ispell
      :ensure t)
    (setq ispell-program-name "aspell")
    (add-to-list 'ispell-local-dictionary-alist '("deutsch-hunspell"
                                                  "[[:alpha:]]"
                                                  "[^[:alpha:]]"
                                                  "[']"
                                                  t
                                                  ("-d" "de_DE"); Dictionary file name
                                                  nil
                                                  iso-8859-1))
    (setq ispell-dictionary "de_DE")
    (setq ispell-extra-args '("--sug-mode=ultra" "--lang=de_DE"))
    (setq flyspell-issue-welcome-flag nil)

    (add-to-list 'auto-mode-alist (cons "\\.adoc\\'" 'adoc-mode))

    (menu-bar-mode 0)
    (tool-bar-mode 0)
    (scroll-bar-mode 0)
    (setq initial-buffer-choice t)
  #+END_SRC
'
